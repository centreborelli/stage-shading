import numpy as np
import pylab as plt
import os
path = 'D:/L3/Stage/modules python'
os.chdir(path)
import fonctions_FMM as fm
import fonctions_calculs as fc
import fonctions_espace as fe

plt.ion()
plt.show()


## Algo :

## Initialisation du relief et des autres tableaux

h=1/100
X,Y = np.meshgrid(np.arange(0,1,h),np.arange(0,1,h),indexing='ij')
height = fe.ThreeBumps(X,Y)
(n,m) = height.shape
CAS = np.zeros((n,m))



# height=np.zeros((n,m))
"""On impose zéro aux bords du rectangle, et on résoud SFS avec le fast marching en partant du bord"""

Etats = np.ones((n,m)) # 0 = Far ; 1 = Trial ; 2 = Accepted
Etats[1:-1,1:-1] = np.zeros((n-2,m-2))
Bord = Etats == 1

U = np.zeros((n,m)) # valeur de la fonction
U[:,:] = height
U[1:-1,1:-1] = np.inf*np.ones((n-2,m-2))
V = np.zeros((n,m)) # Valeurs des trials
V[1:-1,1:-1] = np.inf*np.ones((n-2,m-2))

# On peut aussi imposer zéro aux bords du relief et commencer la FMM sur ce bord en utililsant la ligne suivante
# U,V,Etats = Initialise_contour(height,0)

X = np.arange(0, n, 1)
Y = np.arange(0, m, 1)
X, Y = np.meshgrid(X, Y)


## Choix de la lumière et récupération de l'intensité (lignes issues du Jupyter)

# Shading parameters

α,β,γ= fe.parametres(0,90)


params = α,β,γ,h
I,Omega = fe.GenerateRHS(height,params)

## FAST MARCHING

# [U,CAS,ITERATION,DELTA] = fm.FFM(Etats, V, U, I, Bord, params, fc.solve_quad, Cas=True,iterations=True, Delta=True)
[U,CAS,ITERATION,DELTA] = fm.FFM_strict(Etats, V, U, I, Bord, params, fc.solve_quad, Cas=True,iterations=True, Delta=True)
# [U,CAS,ITERATION] = fm.FFM_var(Etats, V, U, I, Bord, params, fc.solve_quad2, fc.variation_per, Cas=True,iterations=True)

## EXPLOITATION DES RESULTATS
from matplotlib import cm

def affiche(L) :
    if 1 in L :
        plt.figure("Relief originale")
        plt.clf()
        plt.imshow(height,cmap=plt.cm.RdBu_r)
        plt.colorbar()
    if 2 in L :
        plt.figure("Intensité originale")
        plt.clf()
        plt.imshow(I,cmap='gray')
        plt.colorbar()
    if 3 in L :
        plt.figure("Relief reconstitué")
        plt.clf()
        plt.imshow(U,cmap=plt.cm.RdBu_r)
        plt.colorbar()
    if 4 in L :
        I2,Omega = fe.GenerateRHS(U,params)
        plt.figure("Nouvelle intensité")
        plt.clf()
        plt.imshow(I2,cmap='gray')
        plt.colorbar()
    if 5 in L :
        plt.figure("Voisins considérés pour les calculs")
        plt.clf()
        plt.imshow(CAS,cmap=plt.cm.RdBu_r)
    if 6 in L :
        plt.figure("Ecart de relief")
        plt.clf()
        plt.imshow(height-U,cmap=plt.cm.RdBu_r)
        plt.colorbar()
    if 7 in L :
        plt.figure("Itérations")
        plt.clf()
        plt.imshow(ITERATION)
    if 8 in L :
        plt.figure("Deltas négatifs ?")
        plt.clf()
        plt.imshow(DELTA)
        plt.colorbar()
    if 9 in L :
        print(np.sum(np.abs(U-height))*h**2)
    plt.show()
